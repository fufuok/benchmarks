package msgp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Query":
			z.Query, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Query")
				return
			}
		case "PageNumber":
			z.PageNumber, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "PageNumber")
				return
			}
		case "ResultPerPage":
			z.ResultPerPage, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "ResultPerPage")
				return
			}
		case "Comment":
			z.Comment, err = dc.ReadBytes(z.Comment)
			if err != nil {
				err = msgp.WrapError(err, "Comment")
				return
			}
		case "Corpus":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Corpus")
					return
				}
				z.Corpus = MessageCorpus(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Query"
	err = en.Append(0x85, 0xa5, 0x51, 0x75, 0x65, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Query)
	if err != nil {
		err = msgp.WrapError(err, "Query")
		return
	}
	// write "PageNumber"
	err = en.Append(0xaa, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.PageNumber)
	if err != nil {
		err = msgp.WrapError(err, "PageNumber")
		return
	}
	// write "ResultPerPage"
	err = en.Append(0xad, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.ResultPerPage)
	if err != nil {
		err = msgp.WrapError(err, "ResultPerPage")
		return
	}
	// write "Comment"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Comment)
	if err != nil {
		err = msgp.WrapError(err, "Comment")
		return
	}
	// write "Corpus"
	err = en.Append(0xa6, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.Corpus))
	if err != nil {
		err = msgp.WrapError(err, "Corpus")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Query"
	o = append(o, 0x85, 0xa5, 0x51, 0x75, 0x65, 0x72, 0x79)
	o = msgp.AppendString(o, z.Query)
	// string "PageNumber"
	o = append(o, 0xaa, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt32(o, z.PageNumber)
	// string "ResultPerPage"
	o = append(o, 0xad, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65)
	o = msgp.AppendInt32(o, z.ResultPerPage)
	// string "Comment"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendBytes(o, z.Comment)
	// string "Corpus"
	o = append(o, 0xa6, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73)
	o = msgp.AppendInt32(o, int32(z.Corpus))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Query":
			z.Query, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Query")
				return
			}
		case "PageNumber":
			z.PageNumber, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PageNumber")
				return
			}
		case "ResultPerPage":
			z.ResultPerPage, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResultPerPage")
				return
			}
		case "Comment":
			z.Comment, bts, err = msgp.ReadBytesBytes(bts, z.Comment)
			if err != nil {
				err = msgp.WrapError(err, "Comment")
				return
			}
		case "Corpus":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Corpus")
					return
				}
				z.Corpus = MessageCorpus(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Query) + 11 + msgp.Int32Size + 14 + msgp.Int32Size + 8 + msgp.BytesPrefixSize + len(z.Comment) + 7 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageCorpus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageCorpus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessageCorpus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessageCorpus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageCorpus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageCorpus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessageCorpus) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}
